library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyServer(
function(input, output) {
}
)
runApp()
cd(ui.R)
setwd(ui.R)
shinyUI()
shinyUI(ui.R)
ui.R
runApp()
runApp(ui.R)
runApp(server.R)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyServer(
function(input, output) {
}
)
runApp()
server.R
runApp('MachineLearning/shiny1')
runApp('DataProducts/example1')
runApp('DataProducts/example1')
runApp()
runApp('DataProducts/example1')
runApp('DataProducts/example1')
shiny::runApp('DataProducts/example1')
library(shiny)
runApp('DataProducts/example1')
runApp('DataProducts/example1')
shiny::runApp('DataProducts/example1')
runApp('DataProducts/example1')
runApp('DataProducts/example1')
runApp('DataProducts/App.R')
runApp('DataProducts/example1')
runApp('DataProducts/example1')
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
?galton
??galton
data(Galton)
data(galton)
data(GaltonFamilies)
library(car)
data(GaltonFamilies)
data(Galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("HistData")
data(Galton)
library(HistData)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(Galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(Galton)
data(GaltonFamilies)
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyServer(
function(input, output) {
}
)
runApp()
runApp('MachineLearning')
runApp('DataProducts/ui.R')
runApp('DataProducts')
library(shiny)
runApp()
runApp('DataProducts/shiny1')
runApp('DataProducts/shiny1')
runApp('DataProducts/shiny1')
runApp('DataProducts/shiny1')
runApp('DataProducts/shiny1')
runApp('DataProducts/shiny1')
runApp('DataProducts/shiny1')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("Rtools")
install.packages("devtools")
library(Rcpp)
require(devtools)
install_github('ramnathv/rCharts')
install_github('ramnathv/slidify')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fign1.html')
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
n1
cat('<iframe src="fign1.html" width=100%, height=600></iframe>')
n1$
html
n1$save('fig/n1.html', cdn=TRUE)
library(Rcpp)
require(devtools)
require(rCharts)
map3<- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.505, -0.09), bindPopup = "<p> Hi. I am a popup</p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup</p>")
map3$save('fig/map3.html', cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100%, height=600></iframe')
map3
require(devtools)
install_github('rCharts','ramnathv')
install.packages("highcharter")
library(highcharter)
map3<- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.505, -0.09), bindPopup = "<p> Hi. I am a popup</p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup</p>")
map3$save('fig/map3.html', cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100%, height=600></iframe')
map3
map3
map3$save('map3.html', cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100%, height=600></iframe')
cat('<iframe src="map3.html" width=100%, height=600></iframe')
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
M
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidify', force=TRUE)
install_github('ramnathv/slidifyLibraries', force=TRUE)
library(slidify)
library(slidifyLibraries)
library(slidify)
library(slidifyLibraries)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
library(Rcpp)
require(devtools)
require(rCharts)
library(highcharter)
library(slidify)
map3<- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.505, -0.09), bindPopup = "<p> Hi. I am a popup</p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup</p>")
map3$save('map3.html', cdn=TRUE)
cat('<iframe src="map3.html" width=100%, height=600></iframe')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
library(googleVis)
library(slidify)
library(slidifyLibraries)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
M
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
data(airquality)
d <- data.frame(airquality, stringsAsFactors = FALSE)print(d)
head(airquality)
dTable(airquality, sPaginationType = "full_numbers")
airquality
sum(1:10)
10 * 11/2
library(shiny)
require(devtools)
# Chunk 1
sum(1:10)
10 * 11/2
```{r}
install.packages("cygwin1.dll")
tail(getS3method("mean","default"),10)
install.packages("rTools")
install.packages("RTools")
shiny::runApp('DataProducts/reactivity')
runApp(display.mode)
library(shinyapps)
runApp('DataProducts/reactivity')
runApp('DataProducts/reactivity')
runApp('DataProducts/reactivity')
runApp('DataProducts/reactivity')
runApp(display.mode = showcase)
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp('DataProducts/reactivity')
runApp('DataProducts/reactivity')
deployApp()
library(shinyapps)
library(shiny)
runApp('DataProducts/reactivity')
runApp('DataProducts/reactivity')
runApp('DataProducts/reactivity')
runApp('DataProducts/condExe')
runApp('DataProducts/condExe')
runApp('DataProducts/condExe')
runApp('DataProducts/condExe')
runApp('DataProducts/geyser')
library(shinyapps)
library(shiny)
runApp('DataProducts/geyser')
runApp('DataProducts/geyser')
shiny::runApp('DataProducts/stockVis')
library(UsingR)
data(diamond)
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit)
fit <- lm(price ~ I(carat*10), data = diamond)
coef(fit)
shiny::runApp('DataProducts/sbolz')
runApp('DataProducts/sbolz')
runApp('DataProducts/xiodan')
install.packages("DT")
runApp('DataProducts/xiodan')
?coef
shiny::runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
install.packages("UsingR")
runApp('DataProducts/eg_assign')
# b<- coef(fit)[2]
library(UsingR)
data(diamond)
fit <- lm(price ~ I(carat*10), data = diamond)
coef(fit)[1]
coef[2]
coef(fit)[2]
a <- coef(fit)[1]
a
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
?observeEvent
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
runApp('DataProducts/eg_assign')
shiny::runApp('DataProducts/diamond')
library(UsingR)
diamond<- read.cvs(diamond)
?read.cvs
diamond<- read_cvs(diamond)
library(readr)
install.packages("readr")
library(readr)
diamond<- read_cvs(diamond)
diamond<- read.cvs(diamond)
library(readr)
diamond<- data(diamond)
source('~/DataProducts/diamond.R')
UsingR
library(UsingR)
str(UsingR)
str(library(UsingR))
data(homeprice)
str(homeprice)
shiny::runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
?xlim
runApp('DataProducts/diamond')
library(ggplot2)
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
?plot
?abline
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
?dataTableOutput
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
?h2
?h2(column)
?fluidRow
runApp('DataProducts/sbolz')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
fit <- lm(price ~ I(carat*10), data = diamond)
coef(fit)[1]
coef(fit)[2]
fit <- lm(price ~ carat, data = diamond)
coef(fit)[1]
coef(fit)[2]
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
runApp('DataProducts/diamond')
library(devtools)
library(slidify)
shiny::runApp('DataProducts/sbolz')
setwd("~/DataProducts/assignDiamond")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?save
data("diamond")
?savecsv
setwd("~/")
myfile <- data("diamond")
save.csv(myfile.csv)
save(myfile.csv)
save("myfile.csv")
save("diamond.csv")
write.csv(diamond,"diamond.csv")
runApp('DataProducts/assignDiamond')
runApp('DataProducts/assignDiamond')
runApp('DataProducts/assignDiamond')
runApp('DataProducts/assignDiamond')
runApp('DataProducts/assignDiamond')
runApp('DataProducts/assignDiamond')
getwd()
setwd("~/DataProducts/assignDiamond")
shiny::runApp()
getwd()
deployApp()
library(shinyapps)
deployApp()
setwd("~/DataProducts/linRegProj")
x = 0.2
pr <- -259.6 + 372 * x # x = weight of diamonds in 1/10 th carat.
pr
pr <- -259.6 + 3721 * x # x = weight of diamonds in 1/10 th carat.
pr
